// Generated by gencpp from file robot_car/WheelVelocities.msg
// DO NOT EDIT!


#ifndef ROBOT_CAR_MESSAGE_WHEELVELOCITIES_H
#define ROBOT_CAR_MESSAGE_WHEELVELOCITIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_car
{
template <class ContainerAllocator>
struct WheelVelocities_
{
  typedef WheelVelocities_<ContainerAllocator> Type;

  WheelVelocities_()
    : front_left(0.0)
    , front_right(0.0)
    , rear_left(0.0)
    , rear_right(0.0)
    , duration(0.0)  {
    }
  WheelVelocities_(const ContainerAllocator& _alloc)
    : front_left(0.0)
    , front_right(0.0)
    , rear_left(0.0)
    , rear_right(0.0)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef float _front_left_type;
  _front_left_type front_left;

   typedef float _front_right_type;
  _front_right_type front_right;

   typedef float _rear_left_type;
  _rear_left_type rear_left;

   typedef float _rear_right_type;
  _rear_right_type rear_right;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::robot_car::WheelVelocities_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_car::WheelVelocities_<ContainerAllocator> const> ConstPtr;

}; // struct WheelVelocities_

typedef ::robot_car::WheelVelocities_<std::allocator<void> > WheelVelocities;

typedef boost::shared_ptr< ::robot_car::WheelVelocities > WheelVelocitiesPtr;
typedef boost::shared_ptr< ::robot_car::WheelVelocities const> WheelVelocitiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_car::WheelVelocities_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_car::WheelVelocities_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_car::WheelVelocities_<ContainerAllocator1> & lhs, const ::robot_car::WheelVelocities_<ContainerAllocator2> & rhs)
{
  return lhs.front_left == rhs.front_left &&
    lhs.front_right == rhs.front_right &&
    lhs.rear_left == rhs.rear_left &&
    lhs.rear_right == rhs.rear_right &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_car::WheelVelocities_<ContainerAllocator1> & lhs, const ::robot_car::WheelVelocities_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_car::WheelVelocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_car::WheelVelocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_car::WheelVelocities_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_car::WheelVelocities_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_car::WheelVelocities_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_car::WheelVelocities_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_car::WheelVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1a59607ac24381c9b60b103b66fe21a";
  }

  static const char* value(const ::robot_car::WheelVelocities_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1a59607ac24381cULL;
  static const uint64_t static_value2 = 0x9b60b103b66fe21aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_car::WheelVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_car/WheelVelocities";
  }

  static const char* value(const ::robot_car::WheelVelocities_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_car::WheelVelocities_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 front_left\n"
"float32 front_right\n"
"float32 rear_left\n"
"float32 rear_right\n"
"float32 duration\n"
;
  }

  static const char* value(const ::robot_car::WheelVelocities_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_car::WheelVelocities_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.rear_left);
      stream.next(m.rear_right);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelVelocities_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_car::WheelVelocities_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_car::WheelVelocities_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "front_left: ";
    Printer<float>::stream(s, indent + "  ", v.front_left);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "front_right: ";
    Printer<float>::stream(s, indent + "  ", v.front_right);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rear_left: ";
    Printer<float>::stream(s, indent + "  ", v.rear_left);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rear_right: ";
    Printer<float>::stream(s, indent + "  ", v.rear_right);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CAR_MESSAGE_WHEELVELOCITIES_H
